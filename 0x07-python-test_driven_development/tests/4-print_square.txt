# 4-print_square.txt

================================
How to use the 4-print_square.py
================================

The module has the function ``4-print_square()`` that prints a square

Size in numbers
===============

The function takes in `size` as a parameter and prints the square with the `size` given

::

    >>> print_square = __import__('4-print_square').print_square
    >>> print_square(5)
    #####
    #####
    #####
    #####
    #####

::

    >>> print_square(10)
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########

::

    >>> print_square(0)
    

Number error
============

It raises a TypeError when a floating-point number is passed as an argument

::

    >>> print_square(5.15)
    Traceback (most recent call last):
      ...
    TypeError: size must be an integer

It raises a ValueError when a negative number is passed as an argument

::

    >>> print_square(-5)
    Traceback (most recent call last):
      ...
    ValueError: size must be >= 0

Raises a TypeError if a floating-point negative number is passed

::

    >>> print_square(-5.15)
    Traceback (most recent call last):
      ...
    TypeError: size must be an integer

Raises a TypeError if a complex number is passed as an argument

::

    >>> print_square(3.3e99)
    Traceback (most recent call last):
      ...
    TypeError: size must be an integer

Non-numbers
===========

It raises a TypeError if a non-number is passed as an argument

::

    >>> print_square("5")
    Traceback (most recent call last):
      ...
    TypeError: size must be an integer

::

    >>> print_square([2, 4])
    Traceback (most recent call last):
      ...
    TypeError: size must be an integer

::

    >>> print_square(None)
    Traceback (most recent call last):
      ...
    TypeError: size must be an integer
